credentials for dev postgresql database:
  username: y-video
  password: 12345
credentials for test postgresql database:
  username: y-video-test
  password: 12345

TO GENERATE VISUALIZATION OF DATABASE:
run from /Clojure/: java -jar schemaSpy_5.0.0.jar -t pgsql -host localhost:5432 -db y-video -u y-video -o erd/ -dp postgresql-42.2.12.jar -p 12345 -s public

Next steps:
  Define complete database in SQL (at least, complete based on OpenAPI spec)
  Define all query, update, etc. functions  in SQL
  Get all dummy routes in place

Reference:
  To launch postresql as user:
    sudo -u y-video psql
  In postgres:
    \d or \dt - show tables
    SQL statements must end in ;

Questions for Front-End:
      Does content only belong to 1 collection? (probably yes)
      What are files, and are we storing those in the DB, disk, or remotely?
  How are you accessing react?
  Which files are you storing/serving/accessing locally?
  Difference between '/collections/{col_id}/content/{con_id}' and '/content/{id}'?
  How are we handling authentication?
  Does updating collections and content imply deleting relations not listed in request body?
  How are we going to update collections, content, etc?

Other Thoughts:
  For DB, instead of lists, do many-to-many table with extra columns
  User is now Account, Word is now TWord (keywords in postgres)




   (comment ["/math"
             {:swagger {:tags ["math"]}}

             ["/plus"
              {:get {:summary "plus with spec query parameters"
                     :parameters {:query {:x int?, :y int?}}
                     :responses {200 {:body {:total pos-int?}}}
                     :handler (fn [{{{:keys [x y]} :query} :parameters}]
                                {:status 200
                                 :body {:total (+ x y)}})}
               :post {:summary "plus with spec body parameters"
                      :parameters {:body {:x int?, :y int?}}
                      :responses {200 {:body {:total pos-int?}}}
                      :handler (fn [{{{:keys [x y]} :body} :parameters}]
                                 {:status 200
                                  :body {:total (+ x y)}})}}]])

   (comment ["/files"
             {:swagger {:tags ["files"]}}

             ["/upload"
              {:post {:summary "upload a file"
                      :parameters {:multipart {:file multipart/temp-file-part}}
                      :responses {200 {:body {:name string?, :size int?}}}
                      :handler (fn [{{{:keys [file]} :multipart} :parameters}]
                                 {:status 200
                                  :body {:name (:filename file)
                                         :size (:size file)}})}}]

             ["/download"
              {:get {:summary "downloads a file"
                     :swagger {:produces ["image/png"]}
                     :handler (fn [_]
                                {:status 200
                                 :headers {"Content-Type" "image/png"}
                                 :body (-> "public/img/warning_clojure.png"
                                           (io/resource)
                                           (io/input-stream))})}}]])])
(comment :post {:summary "Adds a new collection with the current user as an owner"}
       :parameters {:body {:current_user_id string? :name string? :published boolean? :archived boolean?
                           :assoc_courses [{:id string? :department string? :catalog_number string? :section_number string?}]
                           :assoc_users [{:id string? :role int?}]
                           :assoc_content [{:id string? :name string? :thumbnail string? :published boolean?
                                            :allow_definitions boolean? :allow_notes boolean? :allow_captions string?}]}}
                   :responses {200 {:body {:collection_id string? :name string? :published boolean? :archived boolean?
                                           :assoc_courses [{:course_id string? :department string? :catalog_number string? :section_number string?}]
                                           :assoc_users [{:user_id string? :role int?}]
                                           :assoc_content [{:content_id string? :name string? :thumbnail string? :published boolean?
                                                            :allow_definitions boolean? :allow_notes boolean? :allow_captions string?}]}}}
                   :handler (fn [{{{:keys [current_user_id name published archived assoc_users assoc_courses assoc_content]} :body} :parameters}]
                             {:status 200
                              :body (db-access/add_collection current_user_id name published archived assoc_users assoc_content assoc_courses)}))
